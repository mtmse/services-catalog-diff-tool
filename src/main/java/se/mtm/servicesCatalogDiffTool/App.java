package se.mtm.servicesCatalogDiffTool;

import se.mtm.servicesCatalogDiffTool.file.FileHandler;
import se.mtm.servicesCatalogDiffTool.mapper.ArgumentMapper;
import se.mtm.servicesCatalogDiffTool.marc21.*;
import se.mtm.servicesCatalogDiffTool.validation.ArgumentParser;
import se.mtm.servicesCatalogDiffTool.validation.InputArguments;

import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static final String PATH = "catalog/tpbmarc";


    public static void main(String[] args) {
        new App().start(args);
    }

    public void start(String[] args) {
        ArgumentParser argsParser = new ArgumentParser();
        ArgumentMapper mapper = new ArgumentMapper();
        FileHandler fileHandler = new FileHandler();

        InputArguments arguments = argsParser.validateInput(args);
        IgnoreFields fieldsToIgnore = mapper.mapArgumentsToDataField(arguments.getIgnoreFields());
        Set<String> mediaNumbersSet = fileHandler.readFile(arguments.getMediaNumbersPath());
        String uriMM2 = arguments.getMm2Url();
        String uriMM3 = arguments.getMm3Url();
        String sitekeyMM2 = arguments.getSitekeyMM2();
        String sitekeyMM3 = arguments.getSitekeyMM3();
        String outputPath = arguments.getOutputPath();

        ServicesClientProvider serviceClientProviderMM2 = new ServicesClientProvider(uriMM2, sitekeyMM2);
        ServicesClientProvider serviceClientProviderMM3 = new ServicesClientProvider(uriMM3, sitekeyMM3);
        WebTarget servicesMM2 = serviceClientProviderMM2.buildServicesTargetWithCustomSiteKey(PATH);
        WebTarget servicesMM3 = serviceClientProviderMM3.buildServicesTargetWithCustomSiteKey(PATH);

        // get marc records
        Map<String, RecordType> recordMM2 = new HashMap<>();
        Map<String, RecordType> recordMM3 = new HashMap<>();
        for (String mediaNumber : mediaNumbersSet) {
            recordMM2.put(mediaNumber, getRecords(servicesMM2, mediaNumber));
            recordMM3.put(mediaNumber, getRecords(servicesMM3, mediaNumber));
        }

        // Filter out records that should be ignored
        filterDataFields(recordMM2, fieldsToIgnore);
        filterDataFields(recordMM3, fieldsToIgnore);

        // Compare
        Map<String, String> diffs = new HashMap<>();
        for (String mediaNumber : mediaNumbersSet) {
            String differences = MarcRecordHelper.compareRecords(mediaNumber, recordMM2.get(mediaNumber), recordMM3.get(mediaNumber));
            diffs.put(mediaNumber, differences);
        }

        printOutputToConsole(diffs);
        fileHandler.writeOutputToFile(outputPath, diffs);

        System.out.println("Done!");
    }

    private void printOutputToConsole(Map<String, String> diffs) {
        for (Map.Entry<String, String> entry : diffs.entrySet()) {
            System.out.println(entry.getKey() + " -->\n" + entry.getValue());
        }
    }

    private void filterDataFields(Map<String, RecordType> mmRecords, IgnoreFields fieldsToIgnore) {

        for (Map.Entry<String, RecordType> entry : mmRecords.entrySet()) {
            if (entry.getValue() == null) {
                continue;
            }
            if (fieldsToIgnore.getLeaderField() != null) {
                entry.getValue().setLeader(null);
            }
            for (ControlFieldType cf : entry.getValue().getControlfield()) {
                for (ControlFieldType ignoreField : fieldsToIgnore.getControlFieldList()) {
                    if (cf.getTag().equals(ignoreField.getTag())) {
                        cf.setTag(null);
                        break;
                    }
                }

            }
            for (DataFieldType df : entry.getValue().getDatafield()) {
                for (DataFieldType ignoreField : fieldsToIgnore.getDataFieldList()) {
                    if (df.getTag().equals(ignoreField.getTag()) &&
                             df.getInd1().equals(ignoreField.getInd1()) &&
                             df.getInd2().equals(ignoreField.getInd2())) {
                        df.setTag(null);
                        break;
                    }
                }
            }

        }
    }

    private RecordType getRecords(WebTarget target, String ids) {
        CollectionType collectionType = target
                .queryParam("ids", ids)
                .request().accept(MediaType.APPLICATION_XML).get().readEntity(CollectionType.class);

        return collectionType.getRecord() != null && !collectionType.getRecord().isEmpty()
                ? collectionType.getRecord().get(0) : null;
    }

}
