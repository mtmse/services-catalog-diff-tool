package se.mtm.servicesCatalogDiffTool;

import se.mtm.servicesCatalogDiffTool.file.FileHandler;
import se.mtm.servicesCatalogDiffTool.mapper.ArgumentMapper;
import se.mtm.servicesCatalogDiffTool.marc21.*;
import se.mtm.servicesCatalogDiffTool.validation.ArgumentParser;
import se.mtm.servicesCatalogDiffTool.validation.InputArguments;

import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static final String PATH = "catalog/tpbmarc";


    public static void main(String[] args) {
        new App().start(args);
    }

    public void start(String[] args) {
        ArgumentParser argsParser = new ArgumentParser();
        ArgumentMapper mapper = new ArgumentMapper();
        FileHandler fileHandler = new FileHandler();

        InputArguments arguments = argsParser.validateInput(args);
        IgnoreFields fieldsToIgnore = mapper.mapArgumentsToDataField(arguments.getIgnoreFields());
        Set<String> mediaNumbersSet = fileHandler.readFile(arguments.getMediaNumbersPath());
        String uriMM2 = arguments.getMm2Url();
        String uriMM3 = arguments.getMm3Url();
        String sitekeyMM2 = arguments.getSitekeyMM2();
        String sitekeyMM3 = arguments.getSitekeyMM3();
        String outputPath = arguments.getOutputPath();

        ServicesClientProvider serviceClientProviderMM2 = new ServicesClientProvider(uriMM2, sitekeyMM2);
        ServicesClientProvider serviceClientProviderMM3 = new ServicesClientProvider(uriMM3, sitekeyMM3);
        WebTarget servicesMM2 = serviceClientProviderMM2.buildServicesTargetWithCustomSiteKey(PATH);
        WebTarget servicesMM3 = serviceClientProviderMM3.buildServicesTargetWithCustomSiteKey(PATH);

        // get marc records
        Map<String, RecordType> recordsMM2 = new HashMap<>();
        Map<String, RecordType> recordsMM3 = new HashMap<>();
        for (String mediaNumber : mediaNumbersSet) {
            recordsMM2.put(mediaNumber, getRecords(servicesMM2, mediaNumber));
            recordsMM3.put(mediaNumber, getRecords(servicesMM3, mediaNumber));
        }

        // Filter out fields that should be ignored
        recordsMM2 = filterRecordFields(recordsMM2, fieldsToIgnore);
        recordsMM3 = filterRecordFields(recordsMM3, fieldsToIgnore);

        // Compare
        Map<String, String> diffs = new HashMap<>();
        for (String mediaNumber : mediaNumbersSet) {
            String differences = MarcRecordHelper.compareRecords(mediaNumber, recordsMM2.get(mediaNumber), recordsMM3.get(mediaNumber));
            diffs.put(mediaNumber, differences);
        }

        printOutputToConsole(diffs);
        fileHandler.writeOutputToFile(outputPath, diffs);

        System.out.println("Done!");
    }

    private void printOutputToConsole(Map<String, String> diffs) {
        for (Map.Entry<String, String> entry : diffs.entrySet()) {
            System.out.println(entry.getKey() + " -->\n" + entry.getValue());
        }
    }

    private Map<String, RecordType> filterRecordFields(Map<String, RecordType> mmRecords, IgnoreFields fieldsToIgnore) {
        Map<String, RecordType> filteredRecords = new HashMap<>();

        for (Map.Entry<String, RecordType> entry : mmRecords.entrySet()) {
            if (entry.getValue() == null) {
                continue;
            }

            RecordType record = new RecordType();
            filteredRecords.put(entry.getKey(), record);

            filterLeaderField(fieldsToIgnore, entry, record);
            filterControlFields(fieldsToIgnore, entry, record);
            filterDataFields(fieldsToIgnore, entry, record);
        }

        return filteredRecords;
    }

    private void filterLeaderField(IgnoreFields fieldsToIgnore, Map.Entry<String, RecordType> entry, RecordType record) {
        if (!fieldsToIgnore.getIgnoreLeaderField()) {
            LeaderFieldType leaderField = entry.getValue().getLeader();
            String value = leaderField.getValue();
            if (value != null && value.length() > 5) {
                leaderField.setValue(value.substring(5, value.length()));
            }
            record.setLeader(leaderField);
        }
    }

    private void filterControlFields(IgnoreFields fieldsToIgnore, Map.Entry<String, RecordType> entry, RecordType record) {
        for (ControlFieldType cf : entry.getValue().getControlfield()) {
            boolean ignore = false;
            for (ControlFieldType cfIgnore : fieldsToIgnore.getControlFieldList()) {
                if (cf.getTag().equals(cfIgnore.getTag())) {
                    ignore = true;
                    break;
                }
            }
            if (!ignore) {
                record.getControlfield().add(cf);
            }
        }
    }

    private void filterDataFields(IgnoreFields fieldsToIgnore, Map.Entry<String, RecordType> entry, RecordType record) {
        for (DataFieldType df : entry.getValue().getDatafield()) {
            boolean ignore = false;
            List<SubfieldatafieldType> subfieldsToRemove = new ArrayList<>();
            for (DataFieldType dfIgnore: fieldsToIgnore.getDataFieldList()) {

                if (df.getTag().equals(dfIgnore.getTag()) &&
                         df.getInd1().equals(dfIgnore.getInd1()) &&
                         df.getInd2().equals(dfIgnore.getInd2())) {
                    ignore = true;

                     for (SubfieldatafieldType sf : df.getSubfield()) {
                        for (SubfieldatafieldType sfIgnore : dfIgnore.getSubfield()) {

                            if (sf.getCode().equals(sfIgnore.getCode())) {
                                subfieldsToRemove.add(sf);
                                break;
                            }

                        }
                    }

                    ignore = dfIgnore.getSubfield().isEmpty() && subfieldsToRemove.isEmpty();

                    break;
                }

            }
            if (!subfieldsToRemove.isEmpty()) {
                for (SubfieldatafieldType sfToRemove: subfieldsToRemove) {
                    df.getSubfield().remove(sfToRemove);
                }
            }
            if (!ignore) {
                record.getDatafield().add(df);
            }
        }
    }

    private RecordType getRecords(WebTarget target, String ids) {
        CollectionType collectionType = target
                .queryParam("ids", ids)
                .request().accept(MediaType.APPLICATION_XML).get().readEntity(CollectionType.class);

        return collectionType != null
                && collectionType.getRecord() != null
                && !collectionType.getRecord().isEmpty()
            ? collectionType.getRecord().get(0) : null;
    }

}
